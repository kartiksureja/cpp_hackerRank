#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <cassert>
using namespace std;
template <class t>
class AddElements{
    private:
    t a;
    t x;
    t name;
    public:
    t add(t b)
    {
        return a+b;
    }
    t concatenate(t str1)
    {
        return name+str1;
    }
    
};
template <>
class AddElements <int>
{
    public:
    int a;
    AddElements(int p)
    {
        a=p;
    }
    int add(int d)
    {
        return d+a;
    }
    
};
template<>
class AddElements<double>
{
    public:
    float x;
     AddElements(float q)
    {
        x=q;
    }
    float add(float p)
    {
        return p+x;
    }
};

template<>
class AddElements<string>
{
     public:
    string name;
     AddElements(string q)
    {
        name=q;
    }
    string concatenate(string str1)
    {
        return name+str1;
    }
};



int main () {
  cin >> n;
  for(i=0;i<n;i++) {
    string type;
    cin >> type;
    if(type=="float") {
        double element1,element2;
        cin >> element1 >> element2;
        AddElements<double> myfloat (element1);
        cout << myfloat.add(element2) << endl;
    }
    else if(type == "int") {
        int element1, element2;
        cin >> element1 >> element2;
        AddElements<int> myint (element1);
        cout << myint.add(element2) << endl;
    }
    else if(type == "string") {
        string element1, element2;
        cin >> element1 >> element2;
        AddElements<string> mystring (element1);
        cout << mystring.concatenate(element2) << endl;
    }
  }
  return 0;
}
}
